require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Mokio

  describe Mokio::ContentsController, type: :controller do

    before :each do
      @routes = Mokio::Engine.routes
      Content.delete_all
    end

    # This should return the minimal set of attributes required to create a valid
    # Content. As you add validations to Content, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) { {:title => 'Tralalala' } }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ContentsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    describe "GET index" do
      it "check standard request have not @contents" do
        content = Content.create! valid_attributes
        get :index
        assigns(:contents).should eq(nil)
      end

      it "pending json request return valid data" do
      end
    end

    describe "GET new" do
      it "redirects to Article controller" do
        get :new, valid_session
        expect(response).to redirect_to (new_article_path)
      end

    end
  end
end
