# encoding: utf-8

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Mokio

  describe Mokio::StaticModulesController, type: :controller do

    before(:each) do
      @routes = Mokio::Engine.routes
    end

    # This should return the minimal set of attributes required to create a valid
    # StaticModule. As you add validations to StaticModule, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) { { :title => "tytuÅ‚" } }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # StaticModulesController. Be sure to keep this updated too.
    let(:valid_session) { { "title" => "test" } }

    # describe "GET index" do
    #   it "assigns all static_modules as @static_modules" do
    #     static_module = StaticModule.create! valid_attributes
    #     get :index, {}, valid_session
    #     assigns(:static_module).should eq([static_module])
    #   end
    # end

    before :each do
      request.env["HTTP_REFERER"] = static_modules_path
    end


    describe "GET new" do
      it "assigns a new static_module as @static_module" do
        get :new, params: {}
        assigns(:static_module).should be_a_new(StaticModule)
      end
    end

    describe "GET edit" do
      it "assigns the requested static_module as @static_module" do
        static_module = StaticModule.create! valid_attributes
        get :edit, params: {:id => static_module.to_param}
        assigns(:static_module).should eq(static_module)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new StaticModule" do
          expect {
            post :create, params: {:static_module => valid_attributes, :save_and_new => 1}
          }.to change(StaticModule, :count).by(1)
        end

        it "assigns a newly created static_module as @static_module" do
          post :create, params: {:static_module => valid_attributes, :save_and_new => 1}
          assigns(:static_module).should be_a(StaticModule)
          assigns(:static_module).should be_persisted
        end

        it "redirects to index" do
          post :create, params: {:static_module => valid_attributes}
          response.should redirect_to(static_modules_url)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved static_module as @static_module" do
          # Trigger the behavior that occurs when invalid params are submitted
          StaticModule.any_instance.stub(:save).and_return(false)
          post :create, params: {:static_module => {title: nil}, :save_and_new => 1}
          assigns(:static_module).should be_a_new(StaticModule)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          StaticModule.any_instance.stub(:save).and_return(false)
          post :create, params: {:static_module => {title: nil}, :save_and_new => 1}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested static_module" do
          static_module = StaticModule.create! valid_attributes
          # Assuming there are no other static_modules in the database, this
          # specifies that the StaticModule created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          StaticModule.any_instance.should_receive(:update).with(valid_session)
          put :update, params: {:id => static_module.to_param, :static_module => valid_session, :save_and_new => 1}
        end

        it "assigns the requested static_module as @static_module" do
          static_module = StaticModule.create! valid_attributes
          put :update, params: {:id => static_module.to_param, :static_module => valid_attributes, :save_and_new => 1}
          assigns(:static_module).should eq(static_module)
        end

        it "redirects to index" do
          static_module = StaticModule.create! valid_attributes
          put :update, params: {:id => static_module.to_param, :static_module => valid_attributes}
          response.should redirect_to(static_modules_url)
        end
      end

      describe "with invalid params" do
        it "assigns the static_module as @static_module" do
          static_module = StaticModule.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          StaticModule.any_instance.stub(:save).and_return(false)
          put :update, params: {:id => static_module.to_param, :static_module => {title: nil}, :save_and_new => 1}
          assigns(:static_module).should eq(static_module)
        end

        it "re-renders the 'edit' template" do
          static_module = StaticModule.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          StaticModule.any_instance.stub(:save).and_return(false)
          put :update, params: {:id => static_module.to_param, :static_module => {title: nil}, :save_and_new => 1}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested static_module" do
        static_module = StaticModule.create! valid_attributes
        expect {
          delete :destroy, params: {:id => static_module.to_param}
        }.to change(StaticModule, :count).by(-1)
      end

      it "redirects to the static_modules list" do
        static_module = StaticModule.create! valid_attributes
        delete :destroy, params: {:id => static_module.to_param}
        response.should redirect_to(static_modules_url)
      end
    end

  end
end